name: "Create VyOS OCI image"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  OCI_BUCKET: vyos-images

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OCI_CLI_USER: ${{ secrets.OCI_CLI_USER }}
      OCI_CLI_TENANCY: ${{ secrets.OCI_CLI_TENANCY }}
      OCI_CLI_FINGERPRINT: ${{ secrets.OCI_CLI_FINGERPRINT }}
      OCI_CLI_KEY_CONTENT: ${{ secrets.OCI_CLI_KEY_CONTENT }}
      OCI_CLI_REGION: ${{ secrets.OCI_CLI_REGION }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set VyOS version
        run: echo "VYOS_VERSION=$(cat vyos-version)" >> $GITHUB_ENV

      - name: Checkout vyos-build
        uses: actions/checkout@v3
        with:
          repository: vyos/vyos-build
          ref: ${{ env.VYOS_VERSION }}
          path: build

      - name: Set gosu UID/GID
        run: |
          echo "GOSU_UID=$(id -u)" >> $GITHUB_ENV
          echo "GOSU_GID=$(id -g)" >> $GITHUB_ENV

      - name: Run the build process with Docker
        run: >
          docker run --rm
          -v ${{ github.workspace }}:/vyos
          -w /vyos/build
          --privileged
          --sysctl net.ipv6.conf.lo.disable_ipv6=0
          -e GOSU_UID
          -e GOSU_GID
          vyos/vyos-build:${{ env.VYOS_VERSION }} bash /vyos/scripts/build.sh

      - name: Set VyOS QCOW2 image
        run: |
          find ${{ github.workspace }}/build -maxdepth 1 -name 'VyOS-*.qcow2') > .vyos_image_path
          echo "VYOS_IMAGE_PATH=$(cat .vyos_image_path)" >> $GITHUB_ENV
          echo "VYOS_IMAGE_NAME=$(basename $(cat .vyos_image_path))" >> $GITHUB_ENV
          echo "VYOS_IMAGE_NAME_WO_EXT=$(basename -s .qcow2 $(cat .vyos_image_path))" >> $GITHUB_ENV

      - name: Get OCI namespace
        uses: oracle-actions/run-oci-cli-command@v1.1
        id: oci-get-namespace
        with:
          command: 'os ns get'
          query: 'data'

      - name: Upload image to OCI Cloud Storage
        uses: oracle-actions/run-oci-cli-command@v1.1
        id: oci-upload-image
        with:
          command: 'os object put -ns ${{ steps.oci-get-namespace.outputs.raw_output }} -bn ${{ env.OCI_BUCKET }} --name ${{ env.VYOS_IMAGE_NAME }} --file ${{ env.VYOS_IMAGE_PATH }}'
      
      - name: Import image to OCI Compute
        uses: oracle-actions/run-oci-cli-command@v1.1
        id: oci-import-image
        with:
          command: 'compute image import from-object -bn ${{ env.OCI_BUCKET }} -c ${{ env.OCI_COMPARTMENT }} -n ${{ env.VYOS_IMAGE_NAME_WO_EXT }} -ns ${{ steps.oci-get-namespace.outputs.raw_output }} --display-name "VyOS ${{ env.VYOS_VERSION }}" --launch-mode PARAVIRTUALIZED'

      # Steps for building the container ourselves
      # - name: Gather Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@v4
      #   with:
      #     images: ${{ env.REGISTRY }}/${{ env.VYOS_BUILD_DOCKER_IMAGE }}
      #     tags: |
      #       type=raw,value=latest,priority=600,enable=${{ endsWith(github.ref, github.event.repository.default_branch) }}
      #       type=raw,value=${{ env.VYOS_VERSION }},priority=600
      #       type=sha,enable=true,priority=100,prefix=,suffix=,format=long
      #     flavor: |
      #       latest=false
      
      # - name: Log in to the Container registry
      #   if: ${{ github.event_name != 'pull_request' }}
      #   uses: docker/login-action@v2
      #   with:
      #     registry: ${{ env.REGISTRY }}
      #     username: ${{ github.actor }}
      #     password: ${{ secrets.GITHUB_TOKEN }}
      
      # - name: Build and push
      #   uses: docker/build-push-action@v3
      #   with:
      #     context: build/docker
      #     push: ${{ github.event_name != 'pull_request' }}
      #     tags: ${{ steps.meta.outputs.tags }}
      #     labels: ${{ steps.meta.outputs.labels }}